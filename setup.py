#!/usr/bin/env python3
"""
Script de configuraci√≥n e instalaci√≥n para Trading Analysis App
"""
import os
import sys
import subprocess
from pathlib import Path

def create_directory_structure():
    """Crea la estructura de directorios necesaria"""
    directories = [
        'models',
        'services', 
        'utils',
        'websocket',
        'templates',
        'static/css',
        'static/js',
        'static/images',
        'logs',
        'tests'
    ]
    
    print("üìÅ Creando estructura de directorios...")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   ‚úÖ {directory}/")
        
        # Crear archivos __init__.py donde sea necesario
        if directory in ['models', 'services', 'utils', 'websocket']:
            init_file = Path(directory) / '__init__.py'
            if not init_file.exists():
                init_file.touch()

def create_env_file():
    """Crea archivo .env con configuraci√≥n por defecto"""
    env_content = """# Configuraci√≥n de la aplicaci√≥n Trading Analysis
# Metodolog√≠a Jaime Merino

# Configuraci√≥n del servidor
DEBUG=True
HOST=0.0.0.0
PORT=5000
SECRET_KEY=jaime_merino_trading_2025_secret_key

# Configuraci√≥n de Binance API (opcional para datos p√∫blicos)
BINANCE_API_KEY=
BINANCE_SECRET_KEY=

# Configuraci√≥n de logging
LOG_LEVEL=INFO
LOG_FILE=trading_app.log

# Configuraci√≥n de an√°lisis
UPDATE_INTERVAL=60

# Ambiente de desarrollo
FLASK_ENV=development
"""
    
    env_file = Path('.env')
    if not env_file.exists():
        print("üîß Creando archivo .env...")
        with open(env_file, 'w') as f:
            f.write(env_content)
        print("   ‚úÖ .env creado")
    else:
        print("   ‚ÑπÔ∏è .env ya existe")

def install_dependencies():
    """Instala las dependencias de Python"""
    print("üì¶ Instalando dependencias...")
    
    try:
        # Verificar si pip est√° disponible
        subprocess.run([sys.executable, '-m', 'pip', '--version'], 
                      check=True, capture_output=True)
        
        # Instalar dependencias
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], check=True)
        
        print("   ‚úÖ Dependencias instaladas correctamente")
        
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Error instalando dependencias: {e}")
        print("   üí° Intenta instalar manualmente: pip install -r requirements.txt")
        return False
    except FileNotFoundError:
        print("   ‚ùå pip no encontrado")
        print("   üí° Instala Python y pip primero")
        return False
        
    return True

def create_run_script():
    """Crea script para ejecutar la aplicaci√≥n"""
    
    # Script para Windows
    windows_script = """@echo off
echo üöÄ Iniciando Trading Analysis - Metodolog√≠a Jaime Merino
echo.
python app.py
pause
"""
    
    # Script para Unix/Linux/Mac
    unix_script = """#!/bin/bash
echo "üöÄ Iniciando Trading Analysis - Metodolog√≠a Jaime Merino"
echo
python3 app.py
"""
    
    print("üìù Creando scripts de ejecuci√≥n...")
    
    # Windows batch file
    with open('run.bat', 'w') as f:
        f.write(windows_script)
    print("   ‚úÖ run.bat creado")
    
    # Unix shell script
    with open('run.sh', 'w') as f:
        f.write(unix_script)
    
    # Hacer ejecutable en Unix
    try:
        os.chmod('run.sh', 0o755)
        print("   ‚úÖ run.sh creado")
    except:
        print("   ‚úÖ run.sh creado (sin permisos de ejecuci√≥n)")

def create_gitignore():
    """Crea archivo .gitignore"""
    gitignore_content = """# Trading Analysis App - .gitignore

# Archivos de entorno
.env
.env.local
.env.production

# Logs
logs/
*.log

# Cache de Python
__pycache__/
*.py[cod]
*$py.class
*.so

# Distribuci√≥n / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Sistema operativo
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Datos temporales
temp/
tmp/
"""
    
    gitignore_file = Path('.gitignore')
    if not gitignore_file.exists():
        print("üìù Creando .gitignore...")
        with open(gitignore_file, 'w') as f:
            f.write(gitignore_content)
        print("   ‚úÖ .gitignore creado")
    else:
        print("   ‚ÑπÔ∏è .gitignore ya existe")

def create_readme():
    """Crea archivo README.md"""
    readme_content = """# üöÄ Trading Analysis App
## Metodolog√≠a Jaime Merino - An√°lisis T√©cnico Avanzado

### üìã Descripci√≥n
Aplicaci√≥n web de an√°lisis t√©cnico en tiempo real para trading de criptomonedas, implementando la metodolog√≠a de Jaime Merino con indicadores t√©cnicos avanzados.

### ‚ú® Caracter√≠sticas
- üìä An√°lisis t√©cnico en tiempo real
- üéØ Se√±ales de trading automatizadas  
- üìà Indicadores: EMA, ADX, RSI, MACD, Bollinger Bands
- üîÑ Actualizaciones autom√°ticas v√≠a WebSocket
- üì± Interfaz responsive y moderna
- üõ°Ô∏è Gesti√≥n de riesgo integrada

### üîß Instalaci√≥n

#### Opci√≥n 1: Instalaci√≥n autom√°tica
```bash
python setup.py
```

#### Opci√≥n 2: Instalaci√≥n manual
```bash
# 1. Clonar o descargar el proyecto
git clone <tu-repositorio>

# 2. Instalar dependencias  
pip install -r requirements.txt

# 3. Configurar variables de entorno (opcional)
cp .env.example .env
# Editar .env con tus credenciales de Binance

# 4. Ejecutar aplicaci√≥n
python app.py
```

### üöÄ Uso

#### Iniciar servidor
```bash
# Windows
run.bat

# Linux/Mac
./run.sh

# O directamente
python app.py
```

#### Acceder a la aplicaci√≥n
- **Dashboard**: http://localhost:5000
- **Health Check**: http://localhost:5000/health  
- **API**: http://localhost:5000/api/symbols

### üìä API Endpoints

- `GET /` - Dashboard principal
- `GET /health` - Estado del servidor
- `GET /api/symbols` - S√≠mbolos soportados
- `GET /api/analysis/<symbol>` - An√°lisis de s√≠mbolo espec√≠fico

### üîå WebSocket Events

#### Cliente ‚Üí Servidor
- `request_analysis` - Solicitar an√°lisis de s√≠mbolo
- `request_all_symbols` - An√°lisis de todos los s√≠mbolos
- `ping` - Ping de conexi√≥n

#### Servidor ‚Üí Cliente  
- `analysis_update` - Actualizaci√≥n de an√°lisis
- `analysis_error` - Error en an√°lisis
- `status` - Estado del servidor
- `pong` - Respuesta a ping

### üìÅ Estructura del Proyecto
```
trading_project/
‚îú‚îÄ‚îÄ app.py                     # Aplicaci√≥n principal
‚îú‚îÄ‚îÄ config.py                  # Configuraci√≥n
‚îú‚îÄ‚îÄ requirements.txt           # Dependencias
‚îú‚îÄ‚îÄ models/                    # Modelos de datos
‚îÇ   ‚îî‚îÄ‚îÄ trading_analysis.py    
‚îú‚îÄ‚îÄ services/                  # Servicios de negocio
‚îÇ   ‚îú‚îÄ‚îÄ binance_service.py     
‚îÇ   ‚îú‚îÄ‚îÄ analysis_service.py    
‚îÇ   ‚îî‚îÄ‚îÄ indicators.py          
‚îú‚îÄ‚îÄ utils/                     # Utilidades
‚îÇ   ‚îú‚îÄ‚îÄ logger.py              
‚îÇ   ‚îî‚îÄ‚îÄ json_utils.py          
‚îú‚îÄ‚îÄ websocket/                 # WebSocket handlers
‚îÇ   ‚îî‚îÄ‚îÄ socket_handlers.py     
‚îú‚îÄ‚îÄ templates/                 # Templates HTML
‚îÇ   ‚îî‚îÄ‚îÄ index.html             
‚îî‚îÄ‚îÄ logs/                      # Archivos de log
```

### üîë Variables de entorno (.env)
```env
# Servidor
DEBUG=True
HOST=0.0.0.0  
PORT=5000

# Binance API (opcional)
BINANCE_API_KEY=tu_api_key
BINANCE_SECRET_KEY=tu_secret_key

# Configuraci√≥n
UPDATE_INTERVAL=60
LOG_LEVEL=INFO
```

### üìà S√≠mbolos Soportados
- BTCUSDT, ETHUSDT, ADAUSDT, BNBUSDT
- SOLUSDT, XRPUSDT, DOTUSDT, LINKUSDT

### üõ†Ô∏è Desarrollo

#### Ejecutar en modo desarrollo
```bash
export FLASK_ENV=development
python app.py
```

#### Ejecutar tests (cuando est√©n disponibles)
```bash
python -m pytest tests/
```

### üìä Metodolog√≠a de An√°lisis

#### Indicadores Utilizados
- **EMA 11/55**: Medias m√≥viles exponenciales para tendencia
- **ADX**: Fuerza de la tendencia  
- **RSI**: Momentum y sobrecompra/sobreventa
- **MACD**: Convergencia/divergencia de medias
- **Bollinger Bands**: Volatilidad y niveles

#### Se√±ales de Trading
- **LONG**: EMA11 > EMA55 + confirmaciones t√©cnicas
- **SHORT**: EMA11 < EMA55 + confirmaciones t√©cnicas  
- **WAIT**: Condiciones indecisas
- **NO_SIGNAL**: Sin configuraci√≥n clara

### ‚ö†Ô∏è Disclaimer
Esta aplicaci√≥n es solo para fines educativos y de an√°lisis. No constituye asesor√≠a financiera. El trading conlleva riesgos significativos.

### üìû Soporte
Para soporte t√©cnico, consulta los logs en la carpeta `logs/` o revisa el health check del servidor.

### üìÑ Licencia
Proyecto educativo - Metodolog√≠a Jaime Merino
"""
    
    readme_file = Path('README.md')
    if not readme_file.exists():
        print("üìù Creando README.md...")
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        print("   ‚úÖ README.md creado")
    else:
        print("   ‚ÑπÔ∏è README.md ya existe")

def main():
    """Funci√≥n principal del setup"""
    print("üöÄ Trading Analysis App - Setup")
    print("üìà Metodolog√≠a Jaime Merino")
    print("=" * 50)
    
    try:
        # Crear estructura
        create_directory_structure()
        print()
        
        # Crear archivos de configuraci√≥n
        create_env_file()
        create_gitignore()
        create_readme()
        print()
        
        # Crear scripts
        create_run_script()
        print()
        
        # Instalar dependencias
        if Path('requirements.txt').exists():
            install_dependencies()
        else:
            print("‚ö†Ô∏è requirements.txt no encontrado, saltando instalaci√≥n de dependencias")
        
        print()
        print("‚úÖ Setup completado exitosamente!")
        print()
        print("üéØ Pr√≥ximos pasos:")
        print("   1. Edita .env con tus credenciales de Binance (opcional)")
        print("   2. Coloca tu template HTML en templates/index.html")
        print("   3. Ejecuta: python app.py")
        print("   4. Abre: http://localhost:5000")
        print()
        print("üí° Para desarrollo r√°pido:")
        print("   - Windows: run.bat") 
        print("   - Linux/Mac: ./run.sh")
        
    except Exception as e:
        print(f"‚ùå Error durante setup: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()