"""
Servicio principal de an√°lisis t√©cnico
"""
from datetime import datetime
from typing import Optional
from services.binance_service import binance_service
from services.indicators import indicators_calculator, signal_generator
from models.trading_analysis import TradingAnalysis, create_analysis
from utils.logger import analysis_logger
from config import Config

logger = analysis_logger

class AnalysisService:
    """
    Servicio principal para realizar an√°lisis t√©cnico completo
    """
    
    def __init__(self):
        """Inicializa el servicio de an√°lisis"""
        self.binance = binance_service
        self.indicators_calc = indicators_calculator
        self.signal_gen = signal_generator
        logger.info("üöÄ Servicio de an√°lisis inicializado")
    
    def analyze_symbol(self, symbol: str) -> Optional[TradingAnalysis]:
        """
        Realiza an√°lisis t√©cnico completo para un s√≠mbolo
        
        Args:
            symbol: S√≠mbolo a analizar (ej: 'BTCUSDT')
            
        Returns:
            TradingAnalysis completo o None si hay error
        """
        try:
            logger.info(f"üìä Iniciando an√°lisis de {symbol}")
            
            # 1. Obtener datos de mercado
            market_data = self.binance.get_market_data(symbol)
            if not market_data:
                logger.error(f"‚ùå No se pudieron obtener datos de mercado para {symbol}")
                return None
            
            # 2. Obtener datos hist√≥ricos para indicadores
            df = self.binance.get_klines(symbol, interval='1h', limit=100)
            if df is None or len(df) < 55:
                logger.error(f"‚ùå Insuficientes datos hist√≥ricos para {symbol}")
                return None
            
            # 3. Calcular indicadores t√©cnicos
            indicators = self.indicators_calc.calculate_all_indicators(df)
            
            # 4. Generar se√±al de trading
            signal, base_strength = self.signal_gen.generate_ema_signal(
                indicators.ema_11, indicators.ema_55, market_data.close_price
            )
            
            # 5. Determinar sesgo de tendencia
            trend_bias = self.signal_gen.determine_trend_bias(
                indicators.ema_11, indicators.ema_55, indicators.adx, indicators.rsi
            )
            
            # 6. Calcular fuerza de se√±al refinada
            signal_strength = self.signal_gen.calculate_signal_strength(
                signal, indicators.ema_11, indicators.ema_55, 
                indicators.adx, indicators.rsi, market_data.close_price
            )
            
            # 7. Generar textos de an√°lisis
            analysis_text = self._generate_analysis_text(
                symbol, market_data, indicators, signal, signal_strength, trend_bias
            )
            
            recommendation = self._generate_recommendation(
                symbol, market_data, indicators, signal, signal_strength, trend_bias
            )
            
            # 8. Crear an√°lisis completo
            analysis = create_analysis(
                symbol=symbol,
                market_data=market_data,
                indicators=indicators,
                signal=signal,
                signal_strength=signal_strength,
                trend_bias=trend_bias,
                analysis_text=analysis_text,
                recommendation=recommendation
            )
            
            logger.info(f"‚úÖ An√°lisis completado para {symbol}: {signal} ({signal_strength}%)")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error en an√°lisis de {symbol}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    def _generate_analysis_text(self, symbol: str, market_data, indicators, 
                               signal: str, signal_strength: int, trend_bias: str) -> str:
        """
        Genera el texto detallado del an√°lisis t√©cnico
        """
        try:
            # Calcular cambio porcentual
            change_pct = ((market_data.close_price - market_data.open_price) / market_data.open_price) * 100
            
            # Determinar momentum
            momentum = "POSITIVO" if change_pct > 0 else "NEGATIVO" if change_pct < 0 else "NEUTRAL"
            
            # Evaluar ADX
            adx_strength = "FUERTE" if indicators.adx > 35 else "MODERADA" if indicators.adx > 25 else "D√âBIL"
            
            # Evaluar RSI
            if indicators.rsi > 70:
                rsi_status = "SOBRECOMPRADO"
            elif indicators.rsi < 30:
                rsi_status = "SOBREVENDIDO"
            else:
                rsi_status = "NEUTRAL"
            
            # Relaci√≥n EMAs
            ema_relation = "ALCISTA" if indicators.ema_11 > indicators.ema_55 else "BAJISTA"
            ema_distance = abs((indicators.ema_11 - indicators.ema_55) / indicators.ema_55) * 100
            
            # Volatilidad
            volatility = "ALTA" if abs(change_pct) > 3 else "MODERADA" if abs(change_pct) > 1 else "BAJA"
            
            analysis_text = f"""AN√ÅLISIS T√âCNICO COMPLETO - {symbol}
{'='*50}

üí∞ PRECIO ACTUAL: ${market_data.close_price:,.4f}
üìà CAMBIO 24H: {change_pct:+.2f}% | MOMENTUM: {momentum}
üìä VOLATILIDAD: {volatility}

üéØ SE√ëAL DE TRADING: {signal}
üí™ FUERZA DE SE√ëAL: {signal_strength}/100
üìä SESGO DE TENDENCIA: {trend_bias}

üìâ MEDIAS M√ìVILES EXPONENCIALES:
   ‚Ä¢ EMA 11: ${indicators.ema_11:,.4f}
   ‚Ä¢ EMA 55: ${indicators.ema_55:,.4f}
   ‚Ä¢ Relaci√≥n: {ema_relation} ({ema_distance:.2f}% separaci√≥n)
   ‚Ä¢ Precio vs EMA11: {((market_data.close_price - indicators.ema_11) / indicators.ema_11) * 100:+.2f}%

üìä INDICADORES T√âCNICOS:
   ‚Ä¢ ADX: {indicators.adx:.1f} (Tendencia {adx_strength})
   ‚Ä¢ RSI: {indicators.rsi:.1f} ({rsi_status})
   ‚Ä¢ SMA 20: ${indicators.sma_20:.4f}

‚ö†Ô∏è NIVELES CR√çTICOS:
   ‚Ä¢ Soporte inmediato: ${market_data.low_price:.4f}
   ‚Ä¢ Resistencia inmediata: ${market_data.high_price:.4f}
   ‚Ä¢ Soporte t√©cnico: ${market_data.close_price * 0.98:.4f} (-2%)
   ‚Ä¢ Resistencia t√©cnica: ${market_data.close_price * 1.02:.4f} (+2%)

üìà CONTEXTO DE MERCADO:
   ‚Ä¢ Rango 24h: ${market_data.low_price:.4f} - ${market_data.high_price:.4f}
   ‚Ä¢ Volumen 24h: {market_data.volume:,.0f} {symbol[:3]}
   ‚Ä¢ Precio vs m√°ximo: {((market_data.close_price - market_data.high_price) / market_data.high_price) * 100:+.2f}%
   ‚Ä¢ Precio vs m√≠nimo: {((market_data.close_price - market_data.low_price) / market_data.low_price) * 100:+.2f}%

üîç EVALUACI√ìN METODOLOG√çA JAIME MERINO:
   ‚Ä¢ Confluencia t√©cnica: {self._evaluate_confluence(indicators, signal)}
   ‚Ä¢ Gesti√≥n de riesgo: {self._risk_assessment(signal_strength, indicators.adx)}
   ‚Ä¢ Timing de entrada: {self._entry_timing(signal, signal_strength)}

‚è∞ An√°lisis generado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"""

            return analysis_text
            
        except Exception as e:
            logger.error(f"‚ùå Error generando texto de an√°lisis: {e}")
            return f"Error generando an√°lisis para {symbol}: {str(e)}"
    
    def _generate_recommendation(self, symbol: str, market_data, indicators, 
                               signal: str, signal_strength: int, trend_bias: str) -> str:
        """
        Genera la recomendaci√≥n espec√≠fica de trading
        """
        try:
            current_price = market_data.close_price
            
            if signal == 'LONG' and signal_strength >= 50:
                # Recomendaci√≥n de compra
                entry_price = current_price
                target_1 = current_price * 1.02  # +2%
                target_2 = current_price * 1.05  # +5%
                stop_loss = current_price * 0.98  # -2%
                
                recommendation = f"""üü¢ RECOMENDACI√ìN: COMPRAR (LONG)
{'='*40}

‚úÖ ENTRADA RECOMENDADA:
   ‚Ä¢ Precio entrada: ${entry_price:.4f}
   ‚Ä¢ Rango entrada: ${entry_price * 0.999:.4f} - ${entry_price * 1.001:.4f}

üéØ OBJETIVOS DE GANANCIA:
   ‚Ä¢ Target 1: ${target_1:.4f} (+2.0%) - TOMA PARCIAL 50%
   ‚Ä¢ Target 2: ${target_2:.4f} (+5.0%) - TOMA TOTAL

üõë GESTI√ìN DE RIESGO:
   ‚Ä¢ Stop Loss: ${stop_loss:.4f} (-2.0%)
   ‚Ä¢ Ratio R/R: 1:2.5 (EXCELENTE)

üí∞ GESTI√ìN DE CAPITAL:
   ‚Ä¢ Tama√±o posici√≥n: 2-3% del capital total
   ‚Ä¢ Apalancamiento: 1:1 a 1:3 m√°ximo
   ‚Ä¢ Timeframe: 1-4 horas

üìä JUSTIFICACI√ìN T√âCNICA:
   ‚Ä¢ EMA 11 > EMA 55 (Tendencia alcista)
   ‚Ä¢ Precio sobre EMA 11 (Confirmaci√≥n)
   ‚Ä¢ ADX: {indicators.adx:.1f} ({"Fuerte" if indicators.adx > 35 else "Moderada"} tendencia)
   ‚Ä¢ RSI: {indicators.rsi:.1f} (Zona {"saludable" if 40 < indicators.rsi < 75 else "extrema"})
   ‚Ä¢ Fuerza se√±al: {signal_strength}% ({"ALTA" if signal_strength > 70 else "MEDIA"})

‚ö†Ô∏è CONSIDERACIONES:
   ‚Ä¢ Monitorear cierre bajo EMA 11 para salida anticipada
   ‚Ä¢ Volumen debe acompa√±ar el movimiento alcista
   ‚Ä¢ Estar atento a resistencias en ${market_data.high_price:.4f}

üî• CONFLUENCIAS ALCISTAS DETECTADAS:
   ‚Ä¢ ‚úÖ Estructura t√©cnica favorable
   ‚Ä¢ ‚úÖ Momentum positivo confirmado
   ‚Ä¢ ‚úÖ Indicadores en zona operativa"""

            elif signal == 'SHORT' and signal_strength >= 50:
                # Recomendaci√≥n de venta
                entry_price = current_price
                target_1 = current_price * 0.98  # -2%
                target_2 = current_price * 0.95  # -5%
                stop_loss = current_price * 1.02  # +2%
                
                recommendation = f"""üî¥ RECOMENDACI√ìN: VENDER (SHORT)
{'='*40}

‚úÖ ENTRADA RECOMENDADA:
   ‚Ä¢ Precio entrada: ${entry_price:.4f}
   ‚Ä¢ Rango entrada: ${entry_price * 0.999:.4f} - ${entry_price * 1.001:.4f}

üéØ OBJETIVOS DE GANANCIA:
   ‚Ä¢ Target 1: ${target_1:.4f} (-2.0%) - TOMA PARCIAL 50%
   ‚Ä¢ Target 2: ${target_2:.4f} (-5.0%) - TOMA TOTAL

üõë GESTI√ìN DE RIESGO:
   ‚Ä¢ Stop Loss: ${stop_loss:.4f} (+2.0%)
   ‚Ä¢ Ratio R/R: 1:2.5 (EXCELENTE)

üí∞ GESTI√ìN DE CAPITAL:
   ‚Ä¢ Tama√±o posici√≥n: 2-3% del capital total
   ‚Ä¢ Apalancamiento: 1:1 a 1:3 m√°ximo
   ‚Ä¢ Timeframe: 1-4 horas

üìä JUSTIFICACI√ìN T√âCNICA:
   ‚Ä¢ EMA 11 < EMA 55 (Tendencia bajista)
   ‚Ä¢ Precio bajo EMA 11 (Confirmaci√≥n)
   ‚Ä¢ ADX: {indicators.adx:.1f} ({"Fuerte" if indicators.adx > 35 else "Moderada"} tendencia)
   ‚Ä¢ RSI: {indicators.rsi:.1f} (Zona {"saludable" if 25 < indicators.rsi < 60 else "extrema"})
   ‚Ä¢ Fuerza se√±al: {signal_strength}% ({"ALTA" if signal_strength > 70 else "MEDIA"})

‚ö†Ô∏è CONSIDERACIONES:
   ‚Ä¢ Monitorear cierre sobre EMA 11 para salida anticipada
   ‚Ä¢ Confirmar presi√≥n vendedora con volumen
   ‚Ä¢ Cuidado con soportes en ${market_data.low_price:.4f}

üìâ CONFLUENCIAS BAJISTAS DETECTADAS:
   ‚Ä¢ ‚úÖ Estructura t√©cnica desfavorable
   ‚Ä¢ ‚úÖ Momentum negativo confirmado
   ‚Ä¢ ‚úÖ Indicadores en zona operativa"""

            elif signal == 'WAIT':
                recommendation = f"""üü° RECOMENDACI√ìN: ESPERAR
{'='*30}

‚è≥ RAZ√ìN: Condiciones de mercado indecisas

üìä SITUACI√ìN ACTUAL:
   ‚Ä¢ Precio: ${current_price:.4f}
   ‚Ä¢ EMA 11: ${indicators.ema_11:.4f}
   ‚Ä¢ EMA 55: ${indicators.ema_55:.4f}
   ‚Ä¢ ADX: {indicators.adx:.1f} (Tendencia {"d√©bil" if indicators.adx < 25 else "moderada"})

üîç ESPERANDO CONFIRMACI√ìN DE:
   ‚Ä¢ Ruptura clara de nivel clave
   ‚Ä¢ Incremento en volumen de confirmaci√≥n
   ‚Ä¢ Separaci√≥n definitiva de EMAs
   ‚Ä¢ Fortalecimiento de ADX > 25

üìã PLAN DE ACCI√ìN:
   ‚Ä¢ Monitorear cada 30-60 minutos
   ‚Ä¢ Establecer alertas en niveles clave:
     - Soporte: ${current_price * 0.98:.4f}
     - Resistencia: ${current_price * 1.02:.4f}
   ‚Ä¢ Preparar entrada en ruptura confirmada

üí° NIVELES DE ACTIVACI√ìN:
   ‚Ä¢ LONG si precio > ${indicators.ema_11 * 1.005:.4f} con volumen
   ‚Ä¢ SHORT si precio < ${indicators.ema_11 * 0.995:.4f} con volumen

‚ö†Ô∏è DISCIPLINA: No forzar operaciones en mercado lateral"""

            else:
                recommendation = f"""‚ö™ SIN SE√ëAL OPERATIVA CLARA
{'='*35}

üö´ RAZ√ìN: Condiciones t√©cnicas no favorables

üìä EVALUACI√ìN ACTUAL:
   ‚Ä¢ Fuerza de se√±al: {signal_strength}% (Insuficiente)
   ‚Ä¢ Confluencias t√©cnicas: Limitadas
   ‚Ä¢ Riesgo/Beneficio: No atractivo

üí° RECOMENDACI√ìN GENERAL:
   ‚Ä¢ NO OPERAR en este momento
   ‚Ä¢ PRESERVAR CAPITAL es prioritario
   ‚Ä¢ ESPERAR mejor configuraci√≥n t√©cnica
   ‚Ä¢ REVISAR en 1-2 horas

üìö METODOLOG√çA JAIME MERINO:
   "Es mejor perder una oportunidad que perder dinero.
    Solo operamos con alta probabilidad de √©xito."

üîç PR√ìXIMA REVISI√ìN:
   ‚Ä¢ Monitorear cambios en EMAs
   ‚Ä¢ Vigilar fortalecimiento de ADX
   ‚Ä¢ Esperar confirmaci√≥n de volumen
   
‚è∞ Mantener paciencia y disciplina."""

            return recommendation
            
        except Exception as e:
            logger.error(f"‚ùå Error generando recomendaci√≥n: {e}")
            return f"Error generando recomendaci√≥n para {symbol}: {str(e)}"
    
    def _evaluate_confluence(self, indicators, signal: str) -> str:
        """Eval√∫a la confluencia t√©cnica"""
        confluences = 0
        
        # EMA alignment
        if signal == 'LONG' and indicators.ema_11 > indicators.ema_55:
            confluences += 1
        elif signal == 'SHORT' and indicators.ema_11 < indicators.ema_55:
            confluences += 1
        
        # ADX strength
        if indicators.adx > 25:
            confluences += 1
        
        # RSI zone
        if signal == 'LONG' and 40 < indicators.rsi < 75:
            confluences += 1
        elif signal == 'SHORT' and 25 < indicators.rsi < 60:
            confluences += 1
        
        if confluences >= 3:
            return "ALTA"
        elif confluences >= 2:
            return "MEDIA"
        else:
            return "BAJA"
    
    def _risk_assessment(self, signal_strength: int, adx: float) -> str:
        """Eval√∫a el nivel de riesgo"""
        if signal_strength > 70 and adx > 35:
            return "BAJO (Configuraci√≥n s√≥lida)"
        elif signal_strength > 50 and adx > 25:
            return "MEDIO (Aceptable con gesti√≥n)"
        else:
            return "ALTO (No recomendado)"
    
    def _entry_timing(self, signal: str, signal_strength: int) -> str:
        """Eval√∫a el timing de entrada"""
        if signal in ['LONG', 'SHORT'] and signal_strength > 70:
            return "INMEDIATO (Se√±al fuerte)"
        elif signal in ['LONG', 'SHORT'] and signal_strength > 50:
            return "EN CONFIRMACI√ìN (Esperar volumen)"
        else:
            return "DIFERIR (Esperar mejor setup)"

# Instancia global del servicio
analysis_service = AnalysisService()