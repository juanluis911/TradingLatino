"""
Servicio de an√°lisis mejorado implementando la metodolog√≠a completa de Jaime Merino
"""
from datetime import datetime
from typing import Optional, Dict
from services.binance_service import binance_service
from services.enhanced_indicators import jaime_merino_signal_generator
from models.trading_analysis import TradingAnalysis, create_analysis
from utils.logger import analysis_logger
from config import Config

logger = analysis_logger

class EnhancedAnalysisService:
    """
    Servicio de an√°lisis mejorado siguiendo la metodolog√≠a exacta de Jaime Merino
    """
    
    def __init__(self):
        """Inicializa el servicio de an√°lisis mejorado"""
        self.binance = binance_service
        self.merino_generator = jaime_merino_signal_generator
        logger.info("üöÄ Servicio de an√°lisis mejorado inicializado - Metodolog√≠a Jaime Merino")
    
    def analyze_symbol_merino(self, symbol: str) -> Optional[Dict]:
        """
        Realiza an√°lisis completo siguiendo la metodolog√≠a de Jaime Merino
        
        Args:
            symbol: S√≠mbolo a analizar (ej: 'BTCUSDT')
            
        Returns:
            An√°lisis completo seg√∫n metodolog√≠a Merino
        """
        try:
            logger.info(f"üìä Iniciando an√°lisis Merino para {symbol}")
            
            # 1. Obtener datos multi-temporales
            df_4h = self.binance.get_klines(symbol, interval='4h', limit=100)
            df_1h = self.binance.get_klines(symbol, interval='1h', limit=50)
            df_daily = self.binance.get_klines(symbol, interval='1d', limit=30)
            
            if any(df is None or len(df) < 55 for df in [df_4h, df_1h]):
                logger.error(f"‚ùå Insuficientes datos hist√≥ricos para {symbol}")
                return None
            
            # 2. Obtener precio actual
            current_price = self.binance.get_current_price(symbol)
            if not current_price:
                logger.error(f"‚ùå No se pudo obtener precio actual de {symbol}")
                return None
            
            # 3. Generar se√±al completa de Merino
            merino_signal = self.merino_generator.generate_merino_signal(
                df_4h, df_1h, current_price
            )
            
            # 4. An√°lisis de contexto de mercado
            market_context = self._analyze_market_context(df_daily, current_price)
            
            # 5. Gesti√≥n de capital seg√∫n filosof√≠a 40-30-20-10
            capital_allocation = self._calculate_capital_allocation(
                merino_signal['signal'], merino_signal['signal_strength']
            )
            
            # 6. Generar an√°lisis textual detallado
            analysis_text = self._generate_merino_analysis_text(
                symbol, current_price, merino_signal, market_context
            )
            
            # 7. Generar recomendaci√≥n espec√≠fica
            recommendation = self._generate_merino_recommendation(
                symbol, current_price, merino_signal, capital_allocation
            )
            
            # 8. Compilar resultado final
            analysis_result = {
                'symbol': symbol,
                'timestamp': datetime.now().isoformat(),
                'current_price': current_price,
                'methodology': 'JAIME_MERINO',
                'signal': merino_signal,
                'market_context': market_context,
                'capital_allocation': capital_allocation,
                'analysis_text': analysis_text,
                'recommendation': recommendation,
                'risk_management': self._get_risk_management_rules(),
                'confluence_analysis': self._analyze_confluence(merino_signal)
            }
            
            logger.info(f"‚úÖ An√°lisis Merino completado para {symbol}: {merino_signal['signal']} ({merino_signal['signal_strength']}%)")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå Error en an√°lisis Merino de {symbol}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    def _analyze_market_context(self, df_daily: pd.DataFrame, current_price: float) -> Dict:
        """
        Analiza el contexto general del mercado en timeframe diario
        """
        try:
            # EMAs en diario para contexto macro
            ema_11_daily = df_daily['close'].ewm(span=11).mean().iloc[-1]
            ema_55_daily = df_daily['close'].ewm(span=55).mean().iloc[-1]
            
            # Determinar tendencia macro
            if ema_11_daily > ema_55_daily:
                macro_trend = "BULL_MARKET"
            elif ema_11_daily < ema_55_daily:
                macro_trend = "BEAR_MARKET"
            else:
                macro_trend = "SIDEWAYS"
            
            # Calcular volatilidad reciente
            returns = df_daily['close'].pct_change().dropna()
            volatility = returns.std() * 100
            
            # Niveles de soporte/resistencia diarios
            high_20d = df_daily['high'].tail(20).max()
            low_20d = df_daily['low'].tail(20).min()
            
            return {
                'macro_trend': macro_trend,
                'ema_11_daily': ema_11_daily,
                'ema_55_daily': ema_55_daily,
                'volatility_pct': volatility,
                'resistance_20d': high_20d,
                'support_20d': low_20d,
                'price_vs_resistance': ((current_price - high_20d) / high_20d) * 100,
                'price_vs_support': ((current_price - low_20d) / low_20d) * 100
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error analizando contexto de mercado: {e}")
            return {'macro_trend': 'UNKNOWN', 'volatility_pct': 0}
    
    def _calculate_capital_allocation(self, signal: str, strength: int) -> Dict:
        """
        Calcula asignaci√≥n de capital seg√∫n filosof√≠a 40-30-20-10 de Merino
        """
        base_allocation = {
            'btc_long_term': 40,  # 40% Bitcoin largo plazo
            'weekly_charts': 30,  # 30% gr√°ficos semanales
            'daily_trading': 20,  # 20% trading diario
            'futures': 10         # 10% futuros
        }
        
        # Ajustar seg√∫n fuerza de se√±al
        if signal in ['LONG', 'SHORT'] and strength >= 70:
            # Se√±al muy fuerte: aumentar asignaci√≥n a trading diario
            trading_allocation = {
                'position_size': 3.0,  # 3% del capital total
                'max_risk_per_trade': 1.0,  # 1% m√°ximo riesgo
                'recommended_timeframe': 'daily_trading'
            }
        elif signal in ['LONG', 'SHORT'] and strength >= 50:
            # Se√±al moderada
            trading_allocation = {
                'position_size': 2.0,  # 2% del capital total
                'max_risk_per_trade': 1.0,
                'recommended_timeframe': 'daily_trading'
            }
        else:
            # Sin se√±al clara: preservar capital
            trading_allocation = {
                'position_size': 0.0,
                'max_risk_per_trade': 0.0,
                'recommended_timeframe': 'wait'
            }
        
        return {
            'base_allocation': base_allocation,
            'current_trade': trading_allocation,
            'philosophy': '40-30-20-10 (BTC_LT-Weekly-Daily-Futures)'
        }
    
    def _generate_merino_analysis_text(self, symbol: str, price: float, 
                                     signal: Dict, context: Dict) -> str:
        """
        Genera an√°lisis textual detallado al estilo de Jaime Merino
        """
        try:
            timeframe_4h = signal['timeframe_4h']
            volume_data = signal['volume_profile']
            adx_data = timeframe_4h.get('adx', {})
            
            analysis = f"""üìä AN√ÅLISIS T√âCNICO JAIME MERINO - {symbol}
{'='*60}

üí∞ PRECIO ACTUAL: ${price:,.4f}
üéØ SE√ëAL: {signal['signal']} | FUERZA: {signal['signal_strength']}/100
üìà SESGO 4H: {signal['bias']} | CONFLUENCIAS: {signal['confluence_score']}/4

üîç AN√ÅLISIS MULTI-TEMPORAL:
{'‚îÄ'*40}
üìä Contexto Diario:
   ‚Ä¢ Tendencia Macro: {context['macro_trend']}
   ‚Ä¢ EMA 11 Diario: ${context.get('ema_11_daily', 0):,.4f}
   ‚Ä¢ EMA 55 Diario: ${context.get('ema_55_daily', 0):,.4f}
   ‚Ä¢ Volatilidad: {context.get('volatility_pct', 0):.2f}%

‚è∞ Timeframe 4H (Principal):
   ‚Ä¢ EMA 11: ${timeframe_4h.get('ema_11', 0):,.4f}
   ‚Ä¢ EMA 55: ${timeframe_4h.get('ema_55', 0):,.4f}
   ‚Ä¢ Relaci√≥n EMAs: {"ALCISTA" if timeframe_4h.get('ema_11', 0) > timeframe_4h.get('ema_55', 0) else "BAJISTA"}
   ‚Ä¢ Precio vs EMA11: {((price - timeframe_4h.get('ema_11', price)) / timeframe_4h.get('ema_11', price)) * 100:+.2f}%

üìä INDICADORES CLAVE:
{'‚îÄ'*40}
üéØ ADX (Fuerza de Tendencia):
   ‚Ä¢ Valor: {adx_data.get('adx', 0):.1f} | Modificado: {adx_data.get('adx_modified', -23):.1f}
   ‚Ä¢ Clasificaci√≥n: {adx_data.get('strength', 'DESCONOCIDA')}
   ‚Ä¢ Pendiente: {"FORTALECIENDO" if adx_data.get('strengthening', False) else "DEBILITANDO"}
   ‚Ä¢ Trending: {"S√ç" if adx_data.get('trending', False) else "NO"}

‚ö° Squeeze Momentum:
   ‚Ä¢ Estado: {"SQUEEZE ON (Consolidaci√≥n)" if timeframe_4h.get('squeeze', False) else "SQUEEZE OFF (Movimiento)"}
   ‚Ä¢ Momentum: {timeframe_4h.get('momentum', 0):+.4f}
   ‚Ä¢ Direcci√≥n: {"ALCISTA" if timeframe_4h.get('momentum', 0) > 0 else "BAJISTA" if timeframe_4h.get('momentum', 0) < 0 else "NEUTRAL"}

üìä VOLUME PROFILE (VPVR):
   ‚Ä¢ VPoC: ${volume_data.get('vpoc', 0):,.4f}
   ‚Ä¢ Distancia del VPoC: {volume_data.get('vpoc_distance_pct', 0):+.2f}%
   ‚Ä¢ Niveles de Alto Volumen: {len(volume_data.get('high_volume_levels', []))} identificados

üí° METODOLOG√çA JAIME MERINO:
{'‚îÄ'*40}
‚úÖ Criterios Cumplidos:
   ‚Ä¢ EMAs alineadas para sesgo: {"‚úì" if signal['bias'] != 'NEUTRAL' else "‚úó"}
   ‚Ä¢ ADX confirma tendencia: {"‚úì" if adx_data.get('trending', False) else "‚úó"}
   ‚Ä¢ Momentum direccional: {"‚úì" if abs(timeframe_4h.get('momentum', 0)) > 0.001 else "‚úó"}
   ‚Ä¢ Sin squeeze (consolidaci√≥n): {"‚úì" if not timeframe_4h.get('squeeze', True) else "‚úó"}

üéØ FILOSOF√çA CONTRARIA:
   ‚Ä¢ Operando contra el 90% que pierde
   ‚Ä¢ Disciplina > An√°lisis t√©cnico perfecto
   ‚Ä¢ "Solo operamos con alta probabilidad"

üìà NIVELES CR√çTICOS:
{'‚îÄ'*40}
üõ°Ô∏è Soporte 20D: ${context.get('support_20d', 0):,.4f} ({context.get('price_vs_support', 0):+.2f}%)
üö´ Resistencia 20D: ${context.get('resistance_20d', 0):,.4f} ({context.get('price_vs_resistance', 0):+.2f}%)
üìä VPoC: ${volume_data.get('vpoc', 0):,.4f} (Nivel de mayor volumen)

‚ö†Ô∏è EVALUACI√ìN DE RIESGO:
{'‚îÄ'*40}
üé≤ Riesgo General: {self._assess_risk_level(signal['signal_strength'], adx_data.get('adx', 0))}
üìä Volatilidad: {context.get('volatility_pct', 0):.2f}% ({"ALTA" if context.get('volatility_pct', 0) > 4 else "MODERADA" if context.get('volatility_pct', 0) > 2 else "BAJA"})
üîç Manipulaci√≥n: {"POSIBLE" if signal['signal_strength'] < 40 else "BAJA"}

‚è∞ An√°lisis generado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
üìö Metodolog√≠a: Jaime Merino - Trading Latino Avanzado"""

            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error generando an√°lisis textual: {e}")
            return f"Error generando an√°lisis detallado para {symbol}"
    
    def _generate_merino_recommendation(self, symbol: str, price: float, 
                                      signal: Dict, capital: Dict) -> str:
        """
        Genera recomendaci√≥n espec√≠fica al estilo de Jaime Merino
        """
        try:
            signal_type = signal['signal']
            strength = signal['signal_strength']
            levels = signal['trading_levels']
            
            if signal_type == 'LONG' and strength >= 50:
                recommendation = f"""üü¢ RECOMENDACI√ìN JAIME MERINO: POSICI√ìN LARGA
{'='*55}

‚úÖ SETUP ALCISTA CONFIRMADO:
   ‚Ä¢ Sesgo 4H: {signal['bias']}
   ‚Ä¢ Confluencias t√©cnicas: {signal['confluence_score']}/4
   ‚Ä¢ Fuerza de se√±al: {strength}% ({"EXCELENTE" if strength > 70 else "BUENA"})

üí∞ GESTI√ìN DE CAPITAL (Filosof√≠a 40-30-20-10):
   ‚Ä¢ Asignaci√≥n recomendada: {capital['current_trade']['position_size']:.1f}% del capital total
   ‚Ä¢ Riesgo m√°ximo: {capital['current_trade']['max_risk_per_trade']:.1f}% por operaci√≥n
   ‚Ä¢ Timeframe: Trading diario (20% de la cartera)

üéØ PLAN DE TRADING:
   ‚Ä¢ Entrada: ${levels.get('entry', price):,.4f}
   ‚Ä¢ Target 1: ${levels.get('targets', [price*1.02])[0]:,.4f} (+2%) - CERRAR 50%
   ‚Ä¢ Target 2: ${levels.get('targets', [price*1.02, price*1.05])[1] if len(levels.get('targets', [])) > 1 else price*1.05:,.4f} (+5%) - CERRAR RESTO
   ‚Ä¢ Stop Loss: ${levels.get('stop_loss', price*0.98):,.4f} (-2%)

üõ°Ô∏è REGLAS DE MERINO:
   ‚Ä¢ Sin apalancamiento > 1:3
   ‚Ä¢ Stop si cierra bajo EMA 11
   ‚Ä¢ M√°ximo 6% p√©rdida diaria
   ‚Ä¢ M√°ximo 8% p√©rdida semanal

‚ö° EJECUCI√ìN:
   1. Verificar volumen en breakout
   2. Entrada gradual en 2-3 tramos
   3. Mover stop a breakeven en +1%
   4. Seguir plan sin emociones

üí° METODOLOG√çA: "Tomar dinero de otros legalmente"
‚ö†Ô∏è INVALIDACI√ìN: Cierre bajo EMA 11 en 4H"""

            elif signal_type == 'SHORT' and strength >= 50:
                recommendation = f"""üî¥ RECOMENDACI√ìN JAIME MERINO: POSICI√ìN CORTA
{'='*55}

‚úÖ SETUP BAJISTA CONFIRMADO:
   ‚Ä¢ Sesgo 4H: {signal['bias']}
   ‚Ä¢ Confluencias t√©cnicas: {signal['confluence_score']}/4
   ‚Ä¢ Fuerza de se√±al: {strength}% ({"EXCELENTE" if strength > 70 else "BUENA"})

üí∞ GESTI√ìN DE CAPITAL (Filosof√≠a 40-30-20-10):
   ‚Ä¢ Asignaci√≥n recomendada: {capital['current_trade']['position_size']:.1f}% del capital total
   ‚Ä¢ Riesgo m√°ximo: {capital['current_trade']['max_risk_per_trade']:.1f}% por operaci√≥n
   ‚Ä¢ Timeframe: Trading diario (20% de la cartera)

üéØ PLAN DE TRADING:
   ‚Ä¢ Entrada: ${levels.get('entry', price):,.4f}
   ‚Ä¢ Target 1: ${levels.get('targets', [price*0.98])[0]:,.4f} (-2%) - CERRAR 50%
   ‚Ä¢ Target 2: ${levels.get('targets', [price*0.98, price*0.95])[1] if len(levels.get('targets', [])) > 1 else price*0.95:,.4f} (-5%) - CERRAR RESTO
   ‚Ä¢ Stop Loss: ${levels.get('stop_loss', price*1.02):,.4f} (+2%)

üõ°Ô∏è REGLAS DE MERINO:
   ‚Ä¢ Sin apalancamiento > 1:3
   ‚Ä¢ Stop si cierra sobre EMA 11
   ‚Ä¢ M√°ximo 6% p√©rdida diaria
   ‚Ä¢ M√°ximo 8% p√©rdida semanal

‚ö° EJECUCI√ìN:
   1. Confirmar presi√≥n vendedora
   2. Entrada gradual en 2-3 tramos
   3. Mover stop a breakeven en +1%
   4. Mantener disciplina total

üí° METODOLOG√çA: "Operar contra el 90% que pierde"
‚ö†Ô∏è INVALIDACI√ìN: Cierre sobre EMA 11 en 4H"""

            elif signal_type == 'WAIT_SQUEEZE':
                recommendation = f"""üü° RECOMENDACI√ìN JAIME MERINO: ESPERAR - SQUEEZE DETECTADO
{'='*60}

‚è≥ SITUACI√ìN: CONSOLIDACI√ìN (SQUEEZE ON)
   ‚Ä¢ El mercado est√° en compresi√≥n
   ‚Ä¢ Esperando expansi√≥n de volatilidad
   ‚Ä¢ Bollinger Bands dentro de Keltner Channels

üìä ESTADO ACTUAL:
   ‚Ä¢ Precio: ${price:,.4f}
   ‚Ä¢ Momentum actual: {signal['timeframe_4h'].get('momentum', 0):+.4f}
   ‚Ä¢ ADX: {signal['timeframe_4h'].get('adx', {}).get('adx', 0):.1f}

üéØ PLAN DE ACCI√ìN:
   ‚Ä¢ ESPERAR ruptura del squeeze
   ‚Ä¢ Preparar alertas en niveles clave
   ‚Ä¢ NO forzar operaciones
   ‚Ä¢ Preservar capital es prioridad

üîî ALERTAS SUGERIDAS:
   ‚Ä¢ Ruptura alcista: > ${price * 1.015:,.4f}
   ‚Ä¢ Ruptura bajista: < ${price * 0.985:,.4f}
   ‚Ä¢ Activaci√≥n ADX: > 25

üí° FILOSOF√çA MERINO:
   "Es mejor perder una oportunidad que perder dinero"
   
‚è∞ REVISI√ìN: Cada 2-4 horas hasta expansi√≥n"""

            else:
                recommendation = f"""‚ö™ RECOMENDACI√ìN JAIME MERINO: SIN OPERACI√ìN
{'='*50}

üö´ RAZ√ìN: Condiciones t√©cnicas insuficientes
   ‚Ä¢ Fuerza de se√±al: {strength}% (M√≠nimo: 50%)
   ‚Ä¢ Confluencias: {signal['confluence_score']}/4 (M√≠nimo: 3/4)

üìä ESTADO ACTUAL:
   ‚Ä¢ Se√±al: {signal_type}
   ‚Ä¢ Sesgo: {signal['bias']}
   ‚Ä¢ ADX: {signal['timeframe_4h'].get('adx', {}).get('adx', 0):.1f}

üí∞ ACCI√ìN RECOMENDADA:
   ‚Ä¢ PRESERVAR CAPITAL (40% en BTC largo plazo)
   ‚Ä¢ ESPERAR mejor configuraci√≥n
   ‚Ä¢ MANTENER disciplina

üìö RECORDATORIO MERINO:
   "Solo operamos con alta probabilidad de √©xito"
   "El dinero no se hace forzando operaciones"

üîç PR√ìXIMA REVISI√ìN: 4 horas
‚ö†Ô∏è NO OPERAR hasta confluencia ‚â• 3/4"""

            return recommendation
            
        except Exception as e:
            logger.error(f"‚ùå Error generando recomendaci√≥n: {e}")
            return f"Error generando recomendaci√≥n para {symbol}"
    
    def _assess_risk_level(self, strength: int, adx: float) -> str:
        """Eval√∫a el nivel de riesgo"""
        if strength > 70 and adx > 35:
            return "BAJO (Setup s√≥lido)"
        elif strength > 50 and adx > 25:
            return "MEDIO (Aceptable)"
        else:
            return "ALTO (No recomendado)"
    
    def _get_risk_management_rules(self) -> Dict:
        """Retorna las reglas de gesti√≥n de riesgo de Merino"""
        return {
            'max_risk_per_trade': 1.0,  # 1% m√°ximo por operaci√≥n
            'max_daily_loss': 6.0,      # 6% m√°ximo diario
            'max_weekly_loss': 8.0,     # 8% m√°ximo semanal  
            'max_monthly_loss': 10.0,   # 10% m√°ximo mensual
            'leverage_limit': 3.0,      # M√°ximo 1:3
            'capital_allocation': '40-30-20-10',
            'position_sizing': 'Division en 20 partes iguales',
            'stop_strategy': 'Donde retail NO pone stops'
        }
    
    def _analyze_confluence(self, signal: Dict) -> Dict:
        """Analiza la confluencia t√©cnica detallada"""
        confluences = []
        
        # EMAs
        if signal['bias'] != 'NEUTRAL':
            confluences.append({
                'factor': 'EMAs alineadas',
                'status': True,
                'description': f"EMA 11 {'>' if signal['bias'] == 'BULLISH' else '<'} EMA 55"
            })
        
        # ADX
        adx_data = signal['timeframe_4h'].get('adx', {})
        if adx_data.get('trending', False):
            confluences.append({
                'factor': 'ADX trending',
                'status': True,
                'description': f"ADX {adx_data.get('adx', 0):.1f} > 25"
            })
        
        # Momentum
        momentum = signal['timeframe_4h'].get('momentum', 0)
        if abs(momentum) > 0.001:
            confluences.append({
                'factor': 'Momentum direccional', 
                'status': True,
                'description': f"Momentum {momentum:+.4f}"
            })
        
        # Volume Profile
        vpoc_distance = signal['volume_profile'].get('vpoc_distance_pct', 100)
        if abs(vpoc_distance) < 3:
            confluences.append({
                'factor': 'Cerca del VPoC',
                'status': True, 
                'description': f"Distancia VPoC: {vpoc_distance:+.2f}%"
            })
        
        return {
            'total_confluences': len(confluences),
            'details': confluences,
            'strength': 'ALTA' if len(confluences) >= 3 else 'MEDIA' if len(confluences) >= 2 else 'BAJA'
        }

# Instancia global del servicio mejorado
enhanced_analysis_service = EnhancedAnalysisService()