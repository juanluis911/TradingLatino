"""
Servicio refactorizado para conectar con Binance API - Optimizado para datos reales
"""
import time
import requests
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from binance.client import Client
from binance.exceptions import BinanceAPIException
from models.trading_analysis import MarketData
from utils.logger import binance_logger

logger = binance_logger

class BinanceService:
    """
    Servicio mejorado para interactuar con la API de Binance
    Optimizado para obtener datos reales y manejar errores robustamente
    """
    
    def __init__(self, api_key: str = None, secret_key: str = None):
        """
        Inicializa el servicio de Binance
        
        Args:
            api_key: API key de Binance (opcional para datos p√∫blicos)
            secret_key: Secret key de Binance (opcional para datos p√∫blicos)
        """
        self.api_key = api_key
        self.secret_key = secret_key
        self.client = None
        self.base_url = "https://api.binance.com"
        self.session = self._create_session()
        self._last_request_time = 0
        self._min_request_interval = 0.1  # 100ms entre requests para evitar rate limits
        
        # Cache de precios para evitar requests excesivos
        self._price_cache = {}
        self._cache_timeout = 30  # 30 segundos
        
        # Inicializar cliente si hay credenciales
        if api_key and secret_key:
            try:
                self.client = Client(api_key, secret_key)
                # Test inicial
                self.client.get_account()
                logger.info("‚úÖ Cliente Binance inicializado con credenciales")
            except Exception as e:
                logger.error(f"‚ùå Error inicializando cliente Binance: {e}")
                self.client = None
        else:
            logger.info("üìä Usando API p√∫blica de Binance (sin credenciales)")
        
        # Verificar conexi√≥n inicial
        if self.test_connection():
            logger.info("üåê Conexi√≥n con Binance establecida exitosamente")
        else:
            logger.warning("‚ö†Ô∏è Problemas de conexi√≥n con Binance")
    
    def _create_session(self) -> requests.Session:
        """Crea una sesi√≥n HTTP optimizada"""
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'JaimeMerino-TradingBot/1.0',
            'Content-Type': 'application/json'
        })
        # Configurar timeouts y reintentos
        adapter = requests.adapters.HTTPAdapter(max_retries=3)
        session.mount('https://', adapter)
        return session
    
    def _rate_limit_check(self):
        """Evita exceder los l√≠mites de rate de Binance"""
        current_time = time.time()
        time_since_last = current_time - self._last_request_time
        if time_since_last < self._min_request_interval:
            time.sleep(self._min_request_interval - time_since_last)
        self._last_request_time = time.time()
    
    def _is_cache_valid(self, symbol: str) -> bool:
        """Verifica si el cache es v√°lido para un s√≠mbolo"""
        if symbol not in self._price_cache:
            return False
        
        cache_time = self._price_cache[symbol].get('timestamp', 0)
        return (time.time() - cache_time) < self._cache_timeout
    
    def _update_cache(self, symbol: str, price: float):
        """Actualiza el cache de precios"""
        self._price_cache[symbol] = {
            'price': price,
            'timestamp': time.time()
        }
    
    def get_current_price(self, symbol: str, use_cache: bool = True) -> Optional[float]:
        """
        Obtiene el precio actual de un s√≠mbolo - M√âTODO PRINCIPAL
        
        Args:
            symbol: S√≠mbolo del activo (ej: 'BTCUSDT')
            use_cache: Si usar cache para evitar requests excesivos
            
        Returns:
            Precio actual como float o None si hay error
        """
        # Verificar cache primero
        if use_cache and self._is_cache_valid(symbol):
            cached_price = self._price_cache[symbol]['price']
            logger.debug(f"üíæ Precio de cache para {symbol}: ${cached_price:,.4f}")
            return cached_price
        
        self._rate_limit_check()
        
        # Intentar m√∫ltiples m√©todos en orden de preferencia
        methods = [
            self._get_price_simple,
            self._get_price_24hr,
            self._get_price_from_klines
        ]
        
        for i, method in enumerate(methods, 1):
            try:
                price = method(symbol)
                if price and price > 0:
                    logger.debug(f"‚úÖ Precio {symbol}: ${price:,.4f} (m√©todo {i})")
                    self._update_cache(symbol, price)
                    return price
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è M√©todo {i} fall√≥ para {symbol}: {e}")
                continue
        
        logger.error(f"‚ùå Todos los m√©todos fallaron para obtener precio de {symbol}")
        return None
    
    def _get_price_simple(self, symbol: str) -> Optional[float]:
        """M√©todo 1: Endpoint simple de precio"""
        if self.client:
            # Con credenciales
            ticker = self.client.get_symbol_ticker(symbol=symbol)
            return float(ticker['price'])
        else:
            # API p√∫blica
            url = f"{self.base_url}/api/v3/ticker/price"
            response = self.session.get(url, params={'symbol': symbol}, timeout=10)
            response.raise_for_status()
            data = response.json()
            return float(data['price'])
    
    def _get_price_24hr(self, symbol: str) -> Optional[float]:
        """M√©todo 2: Ticker 24hr (m√°s informaci√≥n)"""
        if self.client:
            ticker = self.client.get_ticker(symbol=symbol)
            return float(ticker['lastPrice'])
        else:
            url = f"{self.base_url}/api/v3/ticker/24hr"
            response = self.session.get(url, params={'symbol': symbol}, timeout=10)
            response.raise_for_status()
            data = response.json()
            return float(data['lastPrice'])
    
    def _get_price_from_klines(self, symbol: str) -> Optional[float]:
        """M√©todo 3: √öltimo precio de klines"""
        df = self.get_klines(symbol, interval='1m', limit=1)
        if df is not None and len(df) > 0:
            return float(df.iloc[-1]['close'])
        return None
    
    def get_multiple_prices(self, symbols: List[str]) -> Dict[str, float]:
        """
        Obtiene precios m√∫ltiples de manera eficiente
        
        Args:
            symbols: Lista de s√≠mbolos
            
        Returns:
            Diccionario {symbol: price}
        """
        logger.info(f"üìä Obteniendo precios para {len(symbols)} s√≠mbolos...")
        
        # Intentar obtener todos los precios de una vez
        try:
            prices = self._get_all_prices_bulk(symbols)
            if prices and len(prices) >= len(symbols) * 0.7:  # 70% √©xito m√≠nimo
                logger.info(f"‚úÖ Precios bulk obtenidos: {len(prices)}/{len(symbols)}")
                return prices
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è M√©todo bulk fall√≥: {e}")
        
        # Fallback: obtener precios individuales
        logger.info("üîÑ Obteniendo precios individuales...")
        prices = {}
        for symbol in symbols:
            try:
                price = self.get_current_price(symbol)
                if price:
                    prices[symbol] = price
                else:
                    logger.warning(f"‚ö†Ô∏è No se pudo obtener precio de {symbol}")
            except Exception as e:
                logger.error(f"‚ùå Error obteniendo precio de {symbol}: {e}")
        
        logger.info(f"üìà Precios obtenidos: {len(prices)}/{len(symbols)}")
        return prices
    
    def _get_all_prices_bulk(self, symbols: List[str]) -> Dict[str, float]:
        """Obtiene todos los precios de una vez usando el endpoint bulk"""
        self._rate_limit_check()
        
        url = f"{self.base_url}/api/v3/ticker/price"
        response = self.session.get(url, timeout=15)
        response.raise_for_status()
        
        all_tickers = response.json()
        
        # Filtrar solo los s√≠mbolos que necesitamos
        prices = {}
        for ticker in all_tickers:
            symbol = ticker['symbol']
            if symbol in symbols:
                price = float(ticker['price'])
                if price > 0:
                    prices[symbol] = price
                    self._update_cache(symbol, price)
        
        return prices
    
    def get_market_data(self, symbol: str) -> Optional['MarketData']:
        """
        Obtiene datos completos de mercado para un s√≠mbolo
        
        Args:
            symbol: S√≠mbolo del activo
            
        Returns:
            Objeto MarketData o None si hay error
        """
        self._rate_limit_check()
        
        try:
            if self.client:
                # Usar cliente con credenciales
                ticker = self.client.get_ticker(symbol=symbol)
                data = {
                    'symbol': symbol,
                    'price': float(ticker['lastPrice']),
                    'high': float(ticker['highPrice']),
                    'low': float(ticker['lowPrice']),
                    'volume': float(ticker['volume']),
                    'change': float(ticker['priceChange']),
                    'change_percent': float(ticker['priceChangePercent'])
                }
            else:
                # Usar API p√∫blica
                url = f"{self.base_url}/api/v3/ticker/24hr"
                params = {'symbol': symbol}
                response = self.session.get(url, params=params, timeout=10)
                response.raise_for_status()
                ticker = response.json()
                
                data = {
                    'symbol': symbol,
                    'price': float(ticker['lastPrice']),
                    'high': float(ticker['highPrice']),
                    'low': float(ticker['lowPrice']),
                    'volume': float(ticker['volume']),
                    'change': float(ticker['priceChange']),
                    'change_percent': float(ticker['priceChangePercent'])
                }
            
            # Crear objeto MarketData
            from models.trading_analysis import MarketData
            market_data = MarketData(
                symbol=data['symbol'],
                close_price=data['price'],
                high_price=data['high'],
                low_price=data['low'],
                volume=data['volume'],
                price_change=data['change'],
                price_change_percent=data['change_percent'],
                timestamp=datetime.now()
            )
            
            # Actualizar cache
            self._update_cache(symbol, data['price'])
            
            logger.debug(f"‚úÖ Market data obtenida para {symbol}: ${data['price']:,.4f}")
            return market_data
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo market data para {symbol}: {e}")
            return None
    
    def get_klines(self, symbol: str, interval: str = '1h', limit: int = 100) -> Optional[pd.DataFrame]:
        """
        Obtiene datos de velas (klines) para an√°lisis t√©cnico - MEJORADO
        
        Args:
            symbol: S√≠mbolo del trading pair
            interval: Intervalo de tiempo ('1m', '5m', '1h', '4h', '1d')
            limit: N√∫mero de velas (m√°ximo 1000)
            
        Returns:
            DataFrame con datos OHLCV o None si hay error
        """
        # Validar par√°metros
        if limit > 1000:
            limit = 1000
            logger.warning(f"‚ö†Ô∏è L√≠mite reducido a 1000 para {symbol}")
        
        valid_intervals = ['1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w', '1M']
        if interval not in valid_intervals:
            logger.error(f"‚ùå Intervalo inv√°lido: {interval}")
            return None
        
        self._rate_limit_check()
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if self.client:
                    # Usar cliente con credenciales
                    klines = self.client.get_klines(
                        symbol=symbol,
                        interval=interval,
                        limit=limit
                    )
                else:
                    # Usar API p√∫blica
                    url = f"{self.base_url}/api/v3/klines"
                    params = {
                        'symbol': symbol,
                        'interval': interval,
                        'limit': limit
                    }
                    
                    response = self.session.get(url, params=params, timeout=20)
                    response.raise_for_status()
                    klines = response.json()
                
                if not klines or len(klines) == 0:
                    logger.error(f"‚ùå API retorn√≥ datos vac√≠os para {symbol}")
                    return None
                
                # Convertir a DataFrame con validaci√≥n robusta
                df = pd.DataFrame(klines, columns=[
                    'timestamp', 'open', 'high', 'low', 'close', 'volume',
                    'close_time', 'quote_asset_volume', 'number_of_trades',
                    'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                ])
                
                # Convertir tipos de datos con manejo de errores
                try:
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    numeric_columns = ['open', 'high', 'low', 'close', 'volume']
                    
                    for col in numeric_columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
                    
                    # Verificar datos v√°lidos
                    if df[numeric_columns].isnull().any().any():
                        null_counts = df[numeric_columns].isnull().sum()
                        logger.warning(f"‚ö†Ô∏è Datos nulos en {symbol}: {null_counts.to_dict()}")
                        # Eliminar filas con datos nulos
                        df = df.dropna(subset=numeric_columns)
                    
                    if len(df) == 0:
                        logger.error(f"‚ùå No hay datos v√°lidos para {symbol}")
                        return None
                    
                    # Validar que los precios son l√≥gicos
                    for col in ['open', 'high', 'low', 'close']:
                        if (df[col] <= 0).any():
                            logger.error(f"‚ùå Precios inv√°lidos en columna {col} para {symbol}")
                            return None
                    
                    # Verificar que high >= low, etc.
                    if not (df['high'] >= df['low']).all():
                        logger.error(f"‚ùå Datos inconsistentes (high < low) para {symbol}")
                        return None
                    
                except Exception as e:
                    logger.error(f"‚ùå Error procesando datos de {symbol}: {e}")
                    return None
                
                # Mantener solo columnas necesarias y establecer √≠ndice
                df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']].copy()
                df.set_index('timestamp', inplace=True)
                
                # Verificar cantidad m√≠nima de datos
                min_required = min(20, limit // 2)
                if len(df) < min_required:
                    logger.warning(f"‚ö†Ô∏è Pocos datos para {symbol}: {len(df)}/{limit} velas")
                    if attempt < max_retries - 1:
                        continue
                
                logger.info(f"‚úÖ Klines obtenidas para {symbol} ({interval}): {len(df)} velas")
                return df
                
            except requests.exceptions.RequestException as e:
                logger.warning(f"‚ö†Ô∏è Error de conexi√≥n para {symbol} (intento {attempt+1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # Backoff exponencial
                continue
                
            except Exception as e:
                logger.error(f"‚ùå Error obteniendo klines {symbol} ({interval}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(1)
                    continue
                break
        
        logger.error(f"‚ùå Fall√≥ obtener klines para {symbol} despu√©s de {max_retries} intentos")
        return None
    
    def test_connection(self) -> bool:
        """
        Prueba la conexi√≥n con Binance API - MEJORADO
        
        Returns:
            True si la conexi√≥n es exitosa
        """
        try:
            # Test 1: Ping b√°sico
            url = f"{self.base_url}/api/v3/ping"
            response = self.session.get(url, timeout=5)
            response.raise_for_status()
            
            # Test 2: Tiempo del servidor
            url_time = f"{self.base_url}/api/v3/time"
            time_response = self.session.get(url_time, timeout=5)
            time_response.raise_for_status()
            
            # Test 3: Si hay cliente, probar credenciales
            if self.client:
                try:
                    account_info = self.client.get_account()
                    logger.info("‚úÖ Conexi√≥n Binance exitosa (con credenciales)")
                    return True
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Credenciales inv√°lidas, usando API p√∫blica: {e}")
                    self.client = None  # Disable client si las credenciales fallan
            
            logger.info("‚úÖ Conexi√≥n Binance exitosa (API p√∫blica)")
            return True
            
        except requests.exceptions.Timeout:
            logger.error("‚ùå Error de conexi√≥n Binance: Timeout")
            return False
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå Error de conexi√≥n Binance: No se puede conectar")
            return False
        except requests.exceptions.HTTPError as e:
            logger.error(f"‚ùå Error HTTP Binance: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error de conexi√≥n Binance: {e}")
            return False
    
    def get_server_status(self) -> Dict:
        """
        Obtiene estado completo del servidor Binance y capacidades
        
        Returns:
            Diccionario con informaci√≥n detallada del estado
        """
        status = {
            'connected': False,
            'server_time': None,
            'local_time': datetime.now(),
            'api_type': 'none',
            'rate_limits': {},
            'symbols_tested': {},
            'cache_size': len(self._price_cache),
            'errors': []
        }
        
        try:
            # Test conexi√≥n b√°sica
            if self.test_connection():
                status['connected'] = True
                
                # Obtener tiempo del servidor y calcular latencia
                try:
                    start_time = time.time()
                    url = f"{self.base_url}/api/v3/time"
                    response = self.session.get(url, timeout=10)
                    response.raise_for_status()
                    latency = (time.time() - start_time) * 1000  # ms
                    
                    time_data = response.json()
                    status['server_time'] = datetime.fromtimestamp(time_data['serverTime'] / 1000)
                    status['latency_ms'] = round(latency, 2)
                    
                    # Verificar sincronizaci√≥n de tiempo
                    time_diff = abs((status['server_time'] - status['local_time']).total_seconds())
                    status['time_sync_ok'] = time_diff < 60  # Menos de 1 minuto de diferencia
                    
                except Exception as e:
                    status['errors'].append(f"Error obteniendo tiempo servidor: {e}")
                
                # Determinar tipo de API
                if self.client:
                    try:
                        account_info = self.client.get_account()
                        status['api_type'] = 'authenticated'
                        status['account_type'] = account_info.get('accountType', 'unknown')
                    except:
                        status['api_type'] = 'public_only'
                        status['client_error'] = True
                else:
                    status['api_type'] = 'public_only'
                
                # Test s√≠mbolos principales con detalles
                test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
                for symbol in test_symbols:
                    try:
                        start_time = time.time()
                        price = self.get_current_price(symbol, use_cache=False)
                        response_time = (time.time() - start_time) * 1000
                        
                        status['symbols_tested'][symbol] = {
                            'accessible': price is not None,
                            'price': price,
                            'response_time_ms': round(response_time, 2)
                        }
                    except Exception as e:
                        status['symbols_tested'][symbol] = {
                            'accessible': False,
                            'error': str(e)
                        }
                
                # Informaci√≥n de rate limits (si est√° disponible)
                try:
                    # Esta informaci√≥n generalmente viene en los headers de respuesta
                    status['rate_limits'] = {
                        'requests_per_minute': '1200 (estimated)',
                        'weight_per_minute': '6000 (estimated)'
                    }
                except Exception as e:
                    status['errors'].append(f"Error obteniendo rate limits: {e}")
            
            else:
                status['errors'].append('No se pudo establecer conexi√≥n b√°sica')
        
        except Exception as e:
            status['errors'].append(f'Error general: {e}')
        
        return status
    
    def clear_cache(self):
        """Limpia el cache de precios"""
        self._price_cache.clear()
        logger.info("üßπ Cache de precios limpiado")
    
    def get_cache_info(self) -> Dict:
        """Retorna informaci√≥n del cache"""
        current_time = time.time()
        valid_entries = 0
        
        for symbol, data in self._price_cache.items():
            if (current_time - data['timestamp']) < self._cache_timeout:
                valid_entries += 1
        
        return {
            'total_entries': len(self._price_cache),
            'valid_entries': valid_entries,
            'cache_timeout': self._cache_timeout,
            'symbols': list(self._price_cache.keys())
        }

# INSTANCIA GLOBAL - Configurada desde enhanced_config
try:
    from enhanced_config import MerinoConfig
    binance_service = BinanceService(
        api_key=MerinoConfig.BINANCE_API_KEY,
        secret_key=MerinoConfig.BINANCE_SECRET_KEY
    )
    logger.info("üöÄ BinanceService global inicializado")
except ImportError:
    # Fallback si no hay config
    binance_service = BinanceService()
    logger.warning("‚ö†Ô∏è BinanceService inicializado sin configuraci√≥n")